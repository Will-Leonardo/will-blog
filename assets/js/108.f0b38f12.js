(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{654:function(t,e,r){"use strict";r.r(e);var v=r(0),_=Object(v.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("Boxx",{attrs:{type:"tip"}}),t._v(" "),e("h2",{attrs:{id:"什么是设计模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是设计模式"}},[t._v("#")]),t._v(" 什么是设计模式？")]),t._v(" "),e("p",[t._v("通俗来讲：就是针对某个特殊的场景的特殊处理方案，代表了一种最佳实践，就像造房子，坐北朝南就是一种设计模式，这样子好让阳光照进房子。")]),t._v(" "),e("blockquote",[e("p",[t._v("设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。")])]),t._v(" "),e("h2",{attrs:{id:"设计模式的六大原则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设计模式的六大原则"}},[t._v("#")]),t._v(" 设计模式的六大原则")]),t._v(" "),e("p",[t._v("以下原则，并不是使用设计模式时，需要遵守，而是整个编程过程中，都需要谨记，才能提高代码的可读性和可维护性。")]),t._v(" "),e("p",[t._v("1、"),e("strong",[t._v("单一职责：")]),t._v(" 一个类只负责一项任务或功能，不同的任务和功能不要混合在一起；")]),t._v(" "),e("p",[t._v("2、"),e("strong",[t._v("开闭原则：")]),t._v(" 软件实体（类、模块、函数等）应该对扩展开放，对修改关闭。即可以通过添加新代码来扩展功能，而不需要修改已有的代码")]),t._v(" "),e("p",[t._v("3、"),e("strong",[t._v("里氏替换原则：")]),t._v(" 子类可以扩展父类的功能，但不能改变父类原有的功能。这意味着子类在继承父类时，应避免重写父类的已有方法。（这里涉及到类的继承和多态两种情况, 读者可继续了解）")]),t._v(" "),e("p",[t._v("4、"),e("strong",[t._v("接口隔离原则：")]),t._v(" 和"),e("code",[t._v("单一职责")]),t._v("很类似，但更关注接口依赖程度的隔离；而"),e("code",[t._v("单一职责原则")]),t._v("更加注重的是接口职责的划分。 想象你去一家餐厅点餐，你只需要看菜单上列出的"),e("strong",[t._v("菜品和价格")]),t._v("就可以了。你不需要知道厨房的工作流程、食材的采购方式等等。这里的菜品和价格就是对外的接口。")]),t._v(" "),e("p",[t._v("5、"),e("strong",[t._v("依赖倒置原则：")]),t._v(" 针对接口编程, 不要针对实现编程；高层模块不应该依赖于底层模块, 两个都应该依赖于底层模块的抽象；想象你在建一座房子，你需要使用砖头、水泥等材料。按照传统的思路，你可能会认为房子（高层模块）应该依赖于砖头和水泥（低层模块）。但是，依赖倒置原则告诉我们，房子和砖头、水泥都应该依赖于一个抽象的概念，例如“建筑材料”。这样，当你需要更换建筑材料时，只需要改变这个抽象概念的实现，而不需要修改房子的设计。")]),t._v(" "),e("p",[t._v("参考："),e("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1833682",target:"_blank",rel:"noopener noreferrer"}},[t._v("设计模式六大原则(三)----依赖倒置原则"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("6、"),e("strong",[t._v("迪米特法则：")]),t._v(" 最少知识原则，也就是说，一个对象应当对其他对象尽可能少的了解，不和陌生人说话。想象你在一个大型的办公室里工作，你需要向同事借一支笔。按照迪米特法则的思路，你只需要知道你的同事有没有笔，而不需要知道他笔的颜色、品牌、尺寸等详细信息。")]),t._v(" "),e("p",[t._v("参考："),e("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1836752",target:"_blank",rel:"noopener noreferrer"}},[t._v("设计模式六大原则(五)----迪米特法则"),e("OutboundLink")],1)])],1)}),[],!1,null,null,null);e.default=_.exports}}]);